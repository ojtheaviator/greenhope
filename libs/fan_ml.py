#import asyncio
import numpy as np
import scipy.stats as sp
import pywt
import tflite_runtime.interpreter as tflite


def rms(data):
    return np.sqrt(np.mean(data**2))


def extract_features(data):
    # Assuming data is a list of three lists: [mx, my, mz]
    dataarr = np.asarray(data)
    mx = dataarr[:, 0]
    my = dataarr[:, 1]
    mz = dataarr[:, 2]
    
    # Define the mother wavelet and the maximum decomposition level
    MotherWavelet = pywt.Wavelet('haar')
    Level = 2  # Adjust based on your wavelet decomposition level needs

    # Decompose signals
    coef_mx = pywt.wavedec(mx, MotherWavelet, level=Level)
    coef_my = pywt.wavedec(my, MotherWavelet, level=Level)
    coef_mz = pywt.wavedec(mz, MotherWavelet, level=Level)

    # Features list
    features = []

    # Frequency domain features in requested order
    # my, mz, my, my, mz, mz, mx, mx, mx, my, mz, my, mz, mx, my, mx, mz, my, mx, my, mz, mz, my, mz, mx, my, mz
    features.append(np.min(coef_my[0]))
    features.append(np.min(coef_mz[0]))
    features.append(np.max(coef_my[0]))
    features.append(rms(coef_my[0]))
    features.append(rms(coef_mz[0]))
    features.append(np.max(coef_mz[0]))
    features.append(rms(coef_mx[0]))
    features.append(np.max(coef_mx[0]))
    features.append(np.min(coef_mx[0]))
    features.append(rms(coef_my[1]))
    features.append(rms(coef_mz[1]))
    features.append(np.var(coef_my[0]))
    features.append(np.var(coef_mz[0]))
    features.append(np.var(my))  # Time domain var my
    features.append(rms(coef_mx[1]))
    features.append(np.var(coef_mx[0]))
    features.append(np.min(coef_mx[1]))
    features.append(rms(mx) / np.mean(np.abs(mx)))  # Time domain rms/mean mx
    features.append(np.max(coef_my[1]))
    features.append(np.max(coef_mx[1]))
    features.append(np.var(coef_my[1]))
    features.append(np.var(coef_mz[1]))
    features.append(np.max(coef_mz[1]))
    features.append(np.min(coef_my[1]))
    features.append(np.min(coef_mz[1]))
    features.append(np.var(coef_mx[1]))
    features.append(rms(coef_my[2]))
    features.append(np.var(mz))  # Time domain var mz
    features.append(rms(mz) / np.mean(np.abs(mz)))  # Time domain rms/mean mz
    features.append(rms(coef_mz[2]))

    return features
            
def load_tflite_model(file_path):
    # Load TFLite model and allocate tensors.
    interpreter = tflite.Interpreter(model_path=file_path)
    interpreter.allocate_tensors()
    return interpreter

def predict(interpreter, input_data):
    input_details = interpreter.get_input_details()
    output_details = interpreter.get_output_details()

    # Prepare input data
    input_shape = input_details[0]['shape']
    input_data = np.array(input_data, dtype=np.float32).reshape(input_shape)
    
    # Set the tensor to point to the input data to be inferred
    interpreter.set_tensor(input_details[0]['index'], input_data)

    # Run the inference
    interpreter.invoke()

    # Extract the output
    output_data = interpreter.get_tensor(output_details[0]['index'])
    
    predicted_class = np.argmax(output_data)
    
    return predicted_class
    
def fanAnalysis(data):
    interpreter = load_tflite_model('model.tflite')
    features = extract_features(data)
    prediction = predict(interpreter, features)
    return prediction

if __name__ == "__main__":
    data = [[-1.9134787087912086, 25.831669719169717, -74.13016826923077], [-129.07283653846153, 186.88952991452993, 134.81268696581196], [-15.307829670329669, 24.271367521367523, 47.066773504273506], [77.75681662087912, -126.38447802197803, -155.48844818376068], [-113.76500686813186, 176.48751526251525, 144.22604166666665], [13.74225618131868, -25.831669719169717, -2.857625534188034], [64.53641826923077, -106.967384004884, -162.21227297008548], [-66.10199175824175, 130.7186507936508, 25.214342948717945], [42.61838942307692, -74.72113858363858, -70.0958733974359], [46.097441620879124, -69.17339743589744, -145.4027110042735], [-107.85061813186813, 176.14078144078144, 89.42686965811966], [-54.099261675824174, 100.7261752136752, 111.78358707264957], [0.5218578296703296, 12.30905067155067, -89.93115651709401], [-125.59378434065934, 184.80912698412698, 131.45077457264958], [-5.740436126373627, 15.429655067155066, 39.83866185897436], [71.49452266483516, -115.98246336996336, -162.88465544871795], [-94.10836195054945, 155.16338522588524, 150.78177083333333], [47.663015109890104, -77.32164224664226, -72.95349893162393], [35.48633241758242, -53.39700854700855, -140.52793803418803], [-118.28777472527472, 184.11565934065933, 109.598344017094], [-29.57194368131868, 62.06535409035409, 84.38400106837607], [-41.574673763736264, 85.46988705738706, -24.373864850427353], [-101.58832417582418, 164.3518315018315, 147.9241452991453], [44.183962912087914, -70.04023199023199, -58.83346688034188], [34.79052197802198, -53.74374236874237, -144.5622329059829], [-19.482692307692307, 47.502533577533576, 75.3068376068376], [75.49543269230769, -117.88949938949938, -161.03560363247863], [-65.0582760989011, 117.88949938949938, 11.430502136752136], [-76.53914835164835, 142.85433455433454, 149.26891025641024], [-3.131146978021978, 11.095482295482295, -95.14212072649572], [-126.81145260989011, 180.4749542124542, 146.4112847222222], [29.05008585164835, -41.434691697191695, -21.348143696581197], [44.183962912087914, -72.12063492063491, -153.30320512820512], [-10.263203983516485, 35.886950549450546, 62.69966613247863], [70.4508070054945, -112.16839133089134, -165.57418536324786], [-45.575583791208786, 97.4322039072039, 118.33931623931623], [84.36701579670328, -121.53020451770452, -149.10081463675215], [84.36701579670328, -115.28899572649571, -123.55028044871794], [-40.35700549450549, 66.9196275946276, -48.747729700854705], [74.97357486263735, -101.41964285714285, -101.69784989316238], [-101.41437156593406, 161.75132783882782, 152.79891826923077], [-20.52640796703297, 28.43217338217338, -86.73733974358974], [70.27685439560439, -91.53772893772894, -93.46116452991453], [-94.63021978021978, 159.1508241758242, 154.98416132478633], [78.27867445054946, -100.20607448107447, -104.55547542735042], [-78.10472184065934, 146.8417735042735, 152.79891826923077], [-64.884323489011, 95.17843406593407, -18.65861378205128], [85.06282623626375, -118.40960012210012, -154.47987446581195], [-18.61292925824176, 68.47992979242979, 97.66355502136751], [64.36246565934066, -102.63321123321123, -170.4489583333333], [23.309649725274724, -49.92967032967032, -149.94129273504274], [-126.98540521978022, 178.914652014652, 151.2860576923077], [-38.61747939560439, 45.76886446886447, -70.26396901709401], [-66.79780219780218, 133.8392551892552, 153.30320512820512], [84.36701579670328, -117.02266483516483, -153.135109508547], [2.957194368131868, 39.35428876678877, 75.47493322649572], [35.31237980769231, -71.60053418803419, -165.57418536324786], [-125.94168956043956, 179.26138583638584, 142.54508547008547], [-125.41983173076922, 174.2337454212454, 102.37023237179487], [39.13933722527473, -22.3643315018315, 3.1938167735042735], [-84.36701579670328, 149.26891025641027, 162.88465544871795], [-114.4608173076923, 156.72368742368744, 67.23824786324786], [29.05008585164835, 2.253769841269841, 35.804366987179485], [-6.4362465659340655, -19.937194749694747, -135.98935630341882], [-83.14934752747253, 148.7488095238095, 158.3460737179487], [-121.94077953296704, 163.1382631257631, 83.20733173076923], [41.05281593406594, -19.070360195360195, 6.051442307692307], [-24.87522321428571, 7.801510989010989, -111.1112045940171], [-58.622029532967034, 129.1583485958486, 158.1779780982906], [-127.68121565934065, 175.7940476190476, 126.07171474358974], [74.45171703296704, -71.77390109890109, -63.54014423076923], [-77.75681662087912, 84.42968559218559, -30.425307158119658], [-1.2176682692307692, 66.05279304029304, 102.7064236111111], [-104.19761332417582, 157.24378815628816, 164.56561164529913], [86.80235233516483, -109.39452075702076, -150.78177083333333], [-126.81145260989011, 164.87193223443222, 94.9740251068376], [61.231318681318676, -45.76886446886447, -32.61055021367521], [-7.132057005494505, 75.06787240537241, 113.12835202991452], [18.61292925824176, -60.15831807081807, -166.24656784188033], [-97.93531936813186, 153.42971611721612, 165.57418536324786], [82.10563186813188, -107.83421855921856, -161.37179487179486], [79.67029532967032, -73.5075702075702, -64.88490918803419], [-96.89160370879121, 105.92718253968253, -6.555729166666667], [22.265934065934065, 29.125641025641023, 64.2125267094017], [-20.004550137362635, -10.228647741147741, -129.9379139957265], [42.61838942307692, -87.55028998778998, -178.34945245726493], [-115.15662774725276, 166.77896825396823, 155.32035256410256], [93.76045673076923, -108.00758547008547, -140.69603365384614], [-130.2905048076923, 167.29906898656898, 102.7064236111111], [77.58286401098901, -64.14575702075702, -58.1610844017094], [32.87704326923077, 18.550259462759463, 59.337753739316234], [-37.22585851648352, 12.48241758241758, -114.97740384615383], [-19.134787087912088, 100.89954212454212, 138.5107905982906], [21.396171016483514, -68.47992979242979, -171.9618189102564], [68.18942307692308, -102.97994505494505, -173.13848824786325], [-126.46354739010988, 172.5000763125763, 144.05794604700856], [96.54369848901098, -103.15331196581197, -124.22266292735043], [-129.59469436813185, 162.7915293040293, 88.25020032051282], [-100.71856112637363, 108.3543192918193, -1.1766693376068376], [41.400721153846156, 5.894474969474969, 38.99818376068376]]
    print(fanAnalysis(data))
